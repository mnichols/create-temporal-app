type TemporalConnection {
    namespace: String!
    taskQueue: String
}
type AppInfo {
    temporal: TemporalConnection!
}

type ExecuteWorkflowState {
    value: String!
    validation: ValidateResponse
    applicationMutation1: MutateApplicationResponse
    applicationMutation2: MutateApplicationResponse
    compensation: CompensateResponse
    reply: ReplyResponse
    beginning: BeginResponse
    finalizable: MarkFinalizable
    finalization: FinalizeResponse
}

input ExecuteWorkflowRequest {
    value: String!
    reply: ReplyRequest
}

input ValidateRequest {
    value: String!
}
type ValidateResponse {
    value: String!
}

input MutateApplicationRequest {
    value: String!
}
type MutateApplicationResponse {
    value: String!
}

input CompensateRequest {
    value: String!
}
type CompensateResponse {
    value: String!
}

input ReplyRequest {
    value: String!
    taskQueue: String!
    activityName: String!
}
type ReplyResponse {
    value: String!
}

input BeginRequest {
    value: String!
}
type BeginResponse {
    value: String!
}

input MarkFinalizable {
    value: String!
}
input FinalizeRequest {
    value: String!
}
type FinalizeResponse {
    value: String!
}

input QueryRequest {
    value: String!
}
type QueryResponse {
    value: String!
}

type Mutation {
    executeWorkflow(input: ExecuteWorkflowRequest!): ReplyResponse!
    markFinalizable(input: MarkFinalizable!): FinalizeResponse!
}
type Query {
    appInfo: AppInfo!
    queryWorkflow(input: QueryRequest): ExecuteWorkflowState!
}